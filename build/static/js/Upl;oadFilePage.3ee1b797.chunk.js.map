{"version":3,"sources":["components/Fileupload/index.jsx","components/DocumentsTable/index.jsx","pages/UploadFile.jsx"],"names":["FileUpload","_ref","onFileUpload","onDrop","useCallback","acceptedFiles","length","file","type","alert","_useDropzone","useDropzone","getRootProps","getInputProps","_jsxs","_objectSpread","style","dropzoneStyles","children","_jsx","border","borderRadius","padding","width","height","textAlign","cursor","DocumentsTable","documents","formatDate","inputDate","dateTime","Date","date","toLocaleDateString","time","toLocaleTimeString","formatMsToHMS","ms","seconds","Math","floor","minutes","hours","timeComponents","push","concat","join","handleCancel","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","rowData","response","wrap","_context","prev","next","fetch","API_BASE_URL","_id","method","sent","ok","json","console","error","statusText","t0","message","stop","_x","apply","arguments","columns","title","dataIndex","key","render","uploadeddate","_formatDate","completeddate","record","_formatDate2","status","processingTime","_Fragment","Button","onClick","blob","Blob","fileContent","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","handleDownload","display","flexDirection","justifyContent","rowsProcessed","Progress","percent","processedPErcentage","size","totalRows","marginTop","Spin","tableData","map","index","toString","createdAt","completedAt","requestCount","Table","rowKey","dataSource","Content","Layout","styles","content","margin","minHeight","maxWidth","alignItems","Uploadfile","_useState","useState","_useState2","_slicedToArray","uploadedFile","setUploadedFile","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","documentId","setDocumentId","_useState7","_useState8","setDocuments","_useState9","_useState10","processingInfo","setProcessingInfo","_useState11","_useState12","setProcessedPercentage","useEffect","intervalId","setInterval","result","_processingInfo","_processedPErcentage","clearInterval","toFixed","fetchDocuments","_callee2","data","_context2","forEach","item","some","doc","setTimeout","handleFileUpload","_ref3","_callee3","formData","_context3","FormData","append","log","className","PageHeader","onBack","ghost","alignSelf","marginBottom","marginLeft"],"mappings":"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","file":"static/js/Upl;oadFilePage.3ee1b797.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nexport default function FileUpload({ onFileUpload }) {\n    const onDrop = useCallback((acceptedFiles) => {\n        // Check if only one file is selected\n        if (acceptedFiles.length === 1) {\n            const file = acceptedFiles[0];\n            // Check if the file is a CSV\n            if (file.type === 'text/csv' || file.type === 'application/vnd.ms-excel') {\n                onFileUpload(file);\n            } else {\n                alert('Please upload a CSV file.');\n            }\n        } else {\n            alert('Please upload only one file.');\n        }\n    }, [onFileUpload]);\n\n    const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n    return (\n        <div {...getRootProps()} style={dropzoneStyles}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV file here, or click to select one</p>\n        </div>\n    );\n};\n\nconst dropzoneStyles = {\n    border: '2px dashed #ccc',\n    borderRadius: '4px',\n    padding: '20px',\n    width: '100%',\n    height: '300px',\n    textAlign: 'center',\n    cursor: 'pointer',\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Spin, Button, Progress } from \"antd\";\nimport { API_BASE_URL } from \"@/config/serverApiConfig\";\n\nconst DocumentsTable = ({ documents }) => {\n\n    const formatDate = (inputDate) => {\n        const dateTime = new Date(inputDate);\n        // Get date and time components\n        const date = dateTime.toLocaleDateString(); // Format: MM/DD/YYYY\n        const time = dateTime.toLocaleTimeString(); // Format: HH:MM:SS\n        return { date, time }\n    }\n\n    const formatMsToHMS = (ms) => {\n        const seconds = Math.floor((ms / 1000) % 60);\n        const minutes = Math.floor((ms / (1000 * 60)) % 60);\n        const hours = Math.floor(ms / (1000 * 60 * 60));\n\n        const timeComponents = [];\n\n        if (hours > 0) {\n            timeComponents.push(`${hours} hour${hours > 1 ? 's' : ''}`);\n        }\n\n        if (minutes > 0) {\n            timeComponents.push(`${minutes} minute${minutes > 1 ? 's' : ''}`);\n        }\n\n        if (seconds > 0 || (hours === 0 && minutes === 0)) {\n            timeComponents.push(`${seconds} second${seconds > 1 ? 's' : ''}`);\n        }\n\n        return timeComponents.join(' ');\n    }\n\n\n    const handleDownload = (rowData) => {\n        if (rowData) {\n            const blob = new Blob([rowData.fileContent], { type: 'text/csv' });\n            const url = window.URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"output-data.csv\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    };\n\n    const handleCancel = async (rowData) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}cancelprocessing/${rowData._id}`, {\n                method: 'GET'\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n            } else {\n                console.error('Error cancelling processing:', response.statusText);\n            }\n        } catch (error) {\n            console.error('Error:', error.message);\n        }\n    };\n\n    const columns = [\n        {\n            title: \"Index\",\n            dataIndex: \"index\",\n            key: \"index\",\n        },\n        {\n            title: \"Uploaded Date\",\n            dataIndex: \"uploadeddate\",\n            key: \"uploadeddate\",\n            render: (uploadeddate) => {\n                const { date, time } = formatDate(uploadeddate)\n                return <span>{`${date} ${time}`}</span>\n            }\n        },\n        {\n            title: \"Completed Date\",\n            dataIndex: \"completeddate\",\n            key: \"completeddate\",\n            render: (completeddate, record) => {\n                const { date, time } = formatDate(completeddate)\n                return <span>{record.status === 'processing' ? \"\" : `${date} ${time}`}</span>\n            }\n        },\n        {\n            title: \"Status\",\n            dataIndex: \"status\",\n            key: \"status\",\n            render: (status) => {\n                return <span>{status}</span>;\n            },\n        },\n        {\n            title: \"Processing time\",\n            dataIndex: \"processingTime\",\n            key: \"processingTime\",\n            render: (processingTime) => {\n                return <span>{formatMsToHMS(processingTime)}</span>;\n            },\n        },\n        {\n            title: \"Proxy request count\",\n            dataIndex: \"requestCount\",\n            key: \"requestCount\",\n        },\n        {\n            title: \"Total rows\",\n            dataIndex: \"totalRows\",\n            key: \"totalRows\",\n        },\n        {\n            title: \"Download\",\n            dataIndex: \"status\",\n            key: \"status\",\n            render: (status, record) => (\n                <>\n                    {\n\n                        status === 'completed' ?\n                            <Button type=\"primary\" onClick={() => { handleDownload(record)}}>Download File</Button>\n                            :\n                        status === 'cancelled' ?\n                            <span>Cancelled</span>\n                            :\n                            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n\n                                {\n                                    record.rowsProcessed ?\n                                        <>\n                                            <Progress percent={record.processedPErcentage ? record.processedPErcentage : 0} size=\"small\" />\n                                            Processing {record.rowsProcessed}/{record.totalRows}\n                                            <Button type=\"primary\" style={{ marginTop: '10px' }} onClick={() => { handleCancel(record)}}>Cancel</Button>\n                                        </>\n                                        :\n                                        <Spin size=\"small\" />\n\n                                }\n                            </div>\n\n                    }\n                </>\n            ),\n        }\n    ];\n\n    if (!documents?.length) {\n        return <span>No previous data to show!</span>;\n    }\n\n\n    //Map events array to create table data\n    const tableData = documents.map((document, index) => {\n        return {\n            _id: document._id,\n            index: index.toString(),\n            uploadeddate: document.createdAt,\n            completeddate: document.completedAt,\n            status: document.status,\n            fileContent: document.fileContent,\n            processedPErcentage: document.processedPErcentage,\n            rowsProcessed: document.rowsProcessed,\n            totalRows: document.totalRows,\n            processingTime: document.processingTime,\n            requestCount: document.requestCount\n        };\n    });\n\n\n    return <Table rowKey={(document) => document.index} dataSource={tableData} columns={columns} />;\n};\n\nexport default DocumentsTable;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Layout, PageHeader } from \"antd\";\nimport { API_BASE_URL } from \"@/config/serverApiConfig\";\nimport FileUpload from \"../components/Fileupload\"\nimport { Spin, Progress } from \"antd\";\nimport DocumentsTable from \"@/components/DocumentsTable\";\n\nconst { Content } = Layout;\n\nconst styles = {\n    content: {\n        padding: \"0px 16px 16px 16px\",\n        margin: \"50px auto\",\n        width: \"100%\",\n        minHeight: \"600px\",\n        maxWidth: \"1200px\",\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n    }\n};\n\n\nconst Uploadfile = () => {\n    const [uploadedFile, setUploadedFile] = useState(null);\n    const [isLoading, setIsLoading] = useState(false)\n    const [documentId, setDocumentId] = useState(null)\n    const [documents, setDocuments] = useState([])\n    const [processingInfo, setProcessingInfo] = useState({})\n    const [processedPErcentage, setProcessedPercentage] = useState(0)\n\n    useEffect(() => {\n        let intervalId;\n        if (documentId) {\n            intervalId = setInterval(async () => {\n                const response = await fetch(`${API_BASE_URL}documentstatus/${documentId}`, {\n                    method: 'GET'\n                });\n                if (response.ok) {\n                    const result = await response.json()\n                    if (result.status === \"completed\") {\n                        setUploadedFile(result.fileContent)\n                        setDocumentId(null)\n                        setIsLoading(false)\n                        clearInterval(intervalId)\n                    } else {\n                        const processingInfo = {\n                            totalRows: result?.totalRows ? result?.totalRows : 0,\n                            rowsProcessed: result?.rowsProcessed ? result?.rowsProcessed : 0,\n                            status: result?.status ? result?.status : 'processing'\n                        }\n                        const processedPErcentage = ((result?.rowsProcessed / result?.totalRows) * 100).toFixed(2)\n                        setProcessedPercentage(processedPErcentage)\n                        setProcessingInfo(processingInfo)\n                    }\n                }\n            }, 1000);\n        }\n        fetchDocuments()\n        return () => clearInterval(intervalId)\n    }, [documentId])\n\n\n    const fetchDocuments = async () => {\n        const response = await fetch(`${API_BASE_URL}documents/`, {\n            method: 'GET',\n        });\n\n        if (response.ok) {\n            const result = await response.json();\n            const data = result.data\n            data.forEach((item) => {\n                item.processedPErcentage = ((item.rowsProcessed / item.totalRows) * 100).toFixed(2)\n            })\n            setDocuments(data);\n\n            // Check if any document is still processing\n            const isProcessing = result.data.some((doc) => doc.status === 'processing');\n\n            // If any document is processing, call fetchDocuments again after 3 seconds\n            if (isProcessing) {\n                setTimeout(fetchDocuments, 1000);\n            }\n        }\n    };\n\n    useEffect(() => {\n        fetchDocuments();\n    }, []);\n\n\n\n    const handleFileUpload = async (file) => {\n        setIsLoading(true);\n\n        try {\n            // Create FormData and append the file\n            const formData = new FormData();\n            formData.append('file', file);\n\n            // Perform API call with FormData\n            const response = await fetch(`${API_BASE_URL}uploadFile`, {\n                method: 'POST',\n                body: formData\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                // Handle the response from the server if needed\n                setDocumentId(result?.result._id)\n                setUploadedFile(result.fileContent)\n            } else {\n                console.error('Error uploading file:', response.statusText);\n            }\n        } catch (error) {\n            console.error('Error:', error.message);\n        }\n    };\n\n    const handleDownload = (uploadedFile) => {\n        if (uploadedFile) {\n            const blob = new Blob([uploadedFile], { type: 'text/csv' });\n            const url = window.URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"output-data.csv\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    };\n\n    console.log('Processing info', processingInfo)\n    return (\n        <Layout className=\"site-layout\">\n            <Content className=\"site-layout-background\" style={styles.content}>\n                <PageHeader\n                    title={\"Upload CSV file\"}\n                    onBack={\n                        () => {\n                            setIsLoading(false);\n                            setUploadedFile(null)\n                        }\n                    }\n                    ghost={false}\n                    style={{\n                        alignSelf: \"flex-start\",\n                        padding: \"20px 0px\",\n                    }}\n                ></PageHeader>\n                {\n                    processingInfo.status !== 'cancelled' &&\n                    isLoading &&\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n                        <Spin size=\"large\" />\n                        {\n                            processingInfo.totalRows > 0 &&\n                            <>\n                                <div style={{ marginTop: '46px', marginBottom: '50px' }}>{`Processing ${processingInfo.rowsProcessed}/${processingInfo.totalRows} rows. Please wait...`}</div>\n                                <Progress type=\"circle\" percent={processedPErcentage} style={{ marginTop: '16px', marginBottom: '50px', marginLeft: '55px' }} />\n                            </>\n                        }\n                    </div>\n                }\n                {\n                    uploadedFile && !isLoading ?\n                        <Button type=\"primary\" onClick={() => handleDownload(uploadedFile)}>Download File</Button>\n                        :\n                        <>\n                            {!isLoading && <FileUpload onFileUpload={handleFileUpload} />}\n                        </>\n\n                }\n\n                {\n                    documents.length > 0 &&\n                    <div style={{display: 'flex', marginTop: '30px'}}>\n                        <DocumentsTable documents={documents}></DocumentsTable>\n                    </div>\n                }\n\n\n\n            </Content>\n        </Layout>\n    );\n};\n\nexport default Uploadfile;\n"],"sourceRoot":""}